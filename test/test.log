************************* vendredi 12 avril 2019, 08:41:17 (UTC+0000) *************************

**********************************************************************************
FILE '../test/demo_test/doubleIf.c':

int main() {
    if(1){
        if(1){
            return 42;
        }
    }
}

*--------------------->gcc Compilation Of ../test/demo_test/doubleIf.c<--------------------*



*--------------------->Compilation Of ../test/demo_test/doubleIf.c To ../test/demo_test/doubleIf.asm<--------------------*

[1;96m../test/demo_test/doubleIf.c:[0m no lexical error has been found 
[1;96m../test/demo_test/doubleIf.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/demo_test/doubleIf.s

*--------------------->Compilation Of ../test/demo_test/doubleIf.asm To ../test/demo_test/doubleIf.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/demo_test/doubleIf.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 42
**********************************************************************************
FILE '../test/demo_test/complex_arithmetics.c':

int main() {
    int a = (1+2)*3/4;
    int b = 1<<2>>3&0^1|0;
    int c = ((1 <= 2) == (3 > 1) != (1>=2));
    int d = -1;
    d += 1;
    d -= 1;
    d *= 1;
    d /= 1;
    d %= 1;
    d &= 1;
    d |= 1;
    d ^= 1;
    d++;
    d--;
}

*--------------------->gcc Compilation Of ../test/demo_test/complex_arithmetics.c<--------------------*

../test/demo_test/complex_arithmetics.c: In function â€˜mainâ€™:
../test/demo_test/complex_arithmetics.c:3:22: warning: suggest parentheses around arithmetic in operand of â€˜^â€™ [-Wparentheses]
     int b = 1<<2>>3&0^1|0;
                      ^
../test/demo_test/complex_arithmetics.c:3:24: warning: suggest parentheses around arithmetic in operand of â€˜|â€™ [-Wparentheses]
     int b = 1<<2>>3&0^1|0;
                        ^
../test/demo_test/complex_arithmetics.c:4:34: warning: suggest parentheses around comparison in operand of â€˜!=â€™ [-Wparentheses]
     int c = ((1 <= 2) == (3 > 1) != (1>=2));
                                  ^~
../test/demo_test/complex_arithmetics.c:4:9: warning: unused variable â€˜câ€™ [-Wunused-variable]
     int c = ((1 <= 2) == (3 > 1) != (1>=2));
         ^
../test/demo_test/complex_arithmetics.c:3:9: warning: unused variable â€˜bâ€™ [-Wunused-variable]
     int b = 1<<2>>3&0^1|0;
         ^
../test/demo_test/complex_arithmetics.c:2:9: warning: unused variable â€˜aâ€™ [-Wunused-variable]
     int a = (1+2)*3/4;
         ^


*--------------------->Compilation Of ../test/demo_test/complex_arithmetics.c To ../test/demo_test/complex_arithmetics.asm<--------------------*

[1;96m../test/demo_test/complex_arithmetics.c:[0m no lexical error has been found 
[1;96m../test/demo_test/complex_arithmetics.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/demo_test/complex_arithmetics.s

*--------------------->Compilation Of ../test/demo_test/complex_arithmetics.asm To ../test/demo_test/complex_arithmetics.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/demo_test/complex_arithmetics.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/demo_test/factorial.c':

#include <stdint.h>

int32_t factorial(int n)
{
    if (n >= 1) {
        return n*factorial(n-1);
    }
    else {
        return 1;
    }
}

*--------------------->gcc Compilation Of ../test/demo_test/factorial.c<--------------------*



*--------------------->Compilation Of ../test/demo_test/factorial.c To ../test/demo_test/factorial.asm<--------------------*

[1;96m../test/demo_test/factorial.c:[0m no lexical error has been found 
[1;96m../test/demo_test/factorial.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/demo_test/factorial.s

*--------------------->Compilation Of ../test/demo_test/factorial.asm To ../test/demo_test/factorial.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/demo_test/factorial.o To Binary Code a.out<--------------------*

/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x20): undefined reference to `main'
collect2: error: ld returned 1 exit status

Compilation Failed!
**********************************************************************************
FILE '../test/demo_test/if_and_while.c':

int main() {
    int i = 0;
    int j = 0;
    if(i < 10){
        while(j < 10){
            j++;
        }
        i++;
    }
}

*--------------------->gcc Compilation Of ../test/demo_test/if_and_while.c<--------------------*



*--------------------->Compilation Of ../test/demo_test/if_and_while.c To ../test/demo_test/if_and_while.asm<--------------------*

[1;96m../test/demo_test/if_and_while.c:[0m no lexical error has been found 
[1;96m../test/demo_test/if_and_while.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/demo_test/if_and_while.s

*--------------------->Compilation Of ../test/demo_test/if_and_while.asm To ../test/demo_test/if_and_while.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/demo_test/if_and_while.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/demo_test/doubleWhile.c':

int main() {
    int i = 0;
    int j = 0;
    while(i < 10){
        while(j < 10){
            j++;
        }
        i++;
    }
}

*--------------------->gcc Compilation Of ../test/demo_test/doubleWhile.c<--------------------*



*--------------------->Compilation Of ../test/demo_test/doubleWhile.c To ../test/demo_test/doubleWhile.asm<--------------------*

[1;96m../test/demo_test/doubleWhile.c:[0m no lexical error has been found 
[1;96m../test/demo_test/doubleWhile.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/demo_test/doubleWhile.s

*--------------------->Compilation Of ../test/demo_test/doubleWhile.asm To ../test/demo_test/doubleWhile.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/demo_test/doubleWhile.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/demo_test/str_array_while_putchar.c':

int main() {
    char str[100] = {'c','a','o',' ','x','u','a','n',' ','h','u','y','
','
**********************************************************************************
FILE '../test/backend/Back/2_putchar.c':

#include<inttypes.h>
void main() {
  putchar('O');
  putchar('K');
  putchar(' ');
}

*--------------------->gcc Compilation Of ../test/backend/Back/2_putchar.c<--------------------*

../test/backend/Back/2_putchar.c:2:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/backend/Back/2_putchar.c: In function â€˜mainâ€™:
../test/backend/Back/2_putchar.c:3:3: warning: implicit declaration of function â€˜putcharâ€™ [-Wimplicit-function-declaration]
   putchar('O');
   ^~~~~~~


*--------------------->Compilation Of ../test/backend/Back/2_putchar.c To ../test/backend/Back/2_putchar.asm<--------------------*

[1;96m../test/backend/Back/2_putchar.c:[0m no lexical error has been found 
[1;96m../test/backend/Back/2_putchar.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/backend/Back/2_putchar.s

*--------------------->Compilation Of ../test/backend/Back/2_putchar.asm To ../test/backend/Back/2_putchar.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/backend/Back/2_putchar.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----
OK 
-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/backend/Back/7-testWhileAndVariables.c':

#include<inttypes.h>
void main(void){
	char i;
	i='A';
	
	while(i<'Z'+1)	{
			putchar(i);
			i=i+1;
		} 
	putchar('
');
}

*--------------------->gcc Compilation Of ../test/backend/Back/7-testWhileAndVariables.c<--------------------*

../test/backend/Back/7-testWhileAndVariables.c:2:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main(void){
      ^~~~
../test/backend/Back/7-testWhileAndVariables.c: In function â€˜mainâ€™:
../test/backend/Back/7-testWhileAndVariables.c:7:4: warning: implicit declaration of function â€˜putcharâ€™ [-Wimplicit-function-declaration]
    putchar(i);
    ^~~~~~~


*--------------------->Compilation Of ../test/backend/Back/7-testWhileAndVariables.c To ../test/backend/Back/7-testWhileAndVariables.asm<--------------------*

[1;96m../test/backend/Back/7-testWhileAndVariables.c:[0m no lexical error has been found 
[1;96m../test/backend/Back/7-testWhileAndVariables.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/backend/Back/7-testWhileAndVariables.s

*--------------------->Compilation Of ../test/backend/Back/7-testWhileAndVariables.asm To ../test/backend/Back/7-testWhileAndVariables.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/backend/Back/7-testWhileAndVariables.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----
ABCDEFGHIJKLMNOPQRSTUVWXYZ

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/backend/Back/3_variables.c':

void main(void) {
  char a, b, c;
  a='O';
  b=a;
  c='K';
  a='
';
  putchar(b);
  putchar(c);
  putchar(a);
}

*--------------------->gcc Compilation Of ../test/backend/Back/3_variables.c<--------------------*

../test/backend/Back/3_variables.c:1:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main(void) {
      ^~~~
../test/backend/Back/3_variables.c: In function â€˜mainâ€™:
../test/backend/Back/3_variables.c:7:3: warning: implicit declaration of function â€˜putcharâ€™ [-Wimplicit-function-declaration]
   putchar(b);
   ^~~~~~~


*--------------------->Compilation Of ../test/backend/Back/3_variables.c To ../test/backend/Back/3_variables.asm<--------------------*

[1;96m../test/backend/Back/3_variables.c:[0m no lexical error has been found 
[1;96m../test/backend/Back/3_variables.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/backend/Back/3_variables.s

*--------------------->Compilation Of ../test/backend/Back/3_variables.asm To ../test/backend/Back/3_variables.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/backend/Back/3_variables.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----
OK

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/backend/Back/4-VarConstAddCall.c':


void main(void){
  char a;
  char b;
  char c;
  a='M';
  b=1+a+1;
  c=b+1;
  putchar(b);
  putchar(c);
  putchar('
');
}

*--------------------->gcc Compilation Of ../test/backend/Back/4-VarConstAddCall.c<--------------------*

../test/backend/Back/4-VarConstAddCall.c:2:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main(void){
      ^~~~
../test/backend/Back/4-VarConstAddCall.c: In function â€˜mainâ€™:
../test/backend/Back/4-VarConstAddCall.c:9:3: warning: implicit declaration of function â€˜putcharâ€™ [-Wimplicit-function-declaration]
   putchar(b);
   ^~~~~~~


*--------------------->Compilation Of ../test/backend/Back/4-VarConstAddCall.c To ../test/backend/Back/4-VarConstAddCall.asm<--------------------*

[1;96m../test/backend/Back/4-VarConstAddCall.c:[0m no lexical error has been found 
[1;96m../test/backend/Back/4-VarConstAddCall.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/backend/Back/4-VarConstAddCall.s

*--------------------->Compilation Of ../test/backend/Back/4-VarConstAddCall.asm To ../test/backend/Back/4-VarConstAddCall.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/backend/Back/4-VarConstAddCall.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----
OP

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/backend/Back/5-IfThenElse.c':


void main(void){
  if(1<2)  {
      putchar('V');
    } 
  else   {
      putchar('F');
    } 
  putchar('
');
}

*--------------------->gcc Compilation Of ../test/backend/Back/5-IfThenElse.c<--------------------*

../test/backend/Back/5-IfThenElse.c:2:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main(void){
      ^~~~
../test/backend/Back/5-IfThenElse.c: In function â€˜mainâ€™:
../test/backend/Back/5-IfThenElse.c:4:7: warning: implicit declaration of function â€˜putcharâ€™ [-Wimplicit-function-declaration]
       putchar('V');
       ^~~~~~~


*--------------------->Compilation Of ../test/backend/Back/5-IfThenElse.c To ../test/backend/Back/5-IfThenElse.asm<--------------------*

[1;96m../test/backend/Back/5-IfThenElse.c:[0m no lexical error has been found 
[1;96m../test/backend/Back/5-IfThenElse.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/backend/Back/5-IfThenElse.s

*--------------------->Compilation Of ../test/backend/Back/5-IfThenElse.asm To ../test/backend/Back/5-IfThenElse.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/backend/Back/5-IfThenElse.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----
V

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/backend/Back/1_empty.c':

void main() {
}

*--------------------->gcc Compilation Of ../test/backend/Back/1_empty.c<--------------------*

../test/backend/Back/1_empty.c:1:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/backend/Back/1_empty.c To ../test/backend/Back/1_empty.asm<--------------------*

[1;96m../test/backend/Back/1_empty.c:[0m no lexical error has been found 
[1;96m../test/backend/Back/1_empty.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/backend/Back/1_empty.s

*--------------------->Compilation Of ../test/backend/Back/1_empty.asm To ../test/backend/Back/1_empty.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/backend/Back/1_empty.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/SemanticError/01_MissingVarDeclaration.c':

void main() {
   a = 1;
}

*--------------------->gcc Compilation Of ../test/frontend/SemanticError/01_MissingVarDeclaration.c<--------------------*

../test/frontend/SemanticError/01_MissingVarDeclaration.c:1:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/SemanticError/01_MissingVarDeclaration.c: In function â€˜mainâ€™:
../test/frontend/SemanticError/01_MissingVarDeclaration.c:2:4: error: â€˜aâ€™ undeclared (first use in this function)
    a = 1;
    ^
../test/frontend/SemanticError/01_MissingVarDeclaration.c:2:4: note: each undeclared identifier is reported only once for each function it appears in


*--------------------->Compilation Of ../test/frontend/SemanticError/01_MissingVarDeclaration.c To ../test/frontend/SemanticError/01_MissingVarDeclaration.asm<--------------------*

[1;96m../test/frontend/SemanticError/01_MissingVarDeclaration.c:[0m no lexical error has been found 
[1;96m../test/frontend/SemanticError/01_MissingVarDeclaration.c:[0m no syntax error has been found 
[1;96m../test/frontend/SemanticError/01_MissingVarDeclaration.c:2:3: [1;31merror:[0m 'a' has not been declared yet 
Compilation failed!
**********************************************************************************
FILE '../test/frontend/ValidPrograms/04_OperatorMinus.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 2 - 1;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/04_OperatorMinus.c<--------------------*

../test/frontend/ValidPrograms/04_OperatorMinus.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/04_OperatorMinus.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/04_OperatorMinus.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/04_OperatorMinus.c To ../test/frontend/ValidPrograms/04_OperatorMinus.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/04_OperatorMinus.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/04_OperatorMinus.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/04_OperatorMinus.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/04_OperatorMinus.asm To ../test/frontend/ValidPrograms/04_OperatorMinus.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/04_OperatorMinus.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/22_OperatorIncPre.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   ++a;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/22_OperatorIncPre.c<--------------------*

../test/frontend/ValidPrograms/22_OperatorIncPre.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/22_OperatorIncPre.c To ../test/frontend/ValidPrograms/22_OperatorIncPre.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/22_OperatorIncPre.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/22_OperatorIncPre.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/22_OperatorIncPre.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/22_OperatorIncPre.asm To ../test/frontend/ValidPrograms/22_OperatorIncPre.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/22_OperatorIncPre.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/10_OperatorGeq.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 >= 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/10_OperatorGeq.c<--------------------*

../test/frontend/ValidPrograms/10_OperatorGeq.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/10_OperatorGeq.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/10_OperatorGeq.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/10_OperatorGeq.c To ../test/frontend/ValidPrograms/10_OperatorGeq.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/10_OperatorGeq.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/10_OperatorGeq.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/10_OperatorGeq.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/10_OperatorGeq.asm To ../test/frontend/ValidPrograms/10_OperatorGeq.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/10_OperatorGeq.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/47_ArrayUse.c':

#include <stdint.h>

void main() {
   int32_t a[10];
   a[0] = 0;
   a[1] = 1;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/47_ArrayUse.c<--------------------*

../test/frontend/ValidPrograms/47_ArrayUse.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/47_ArrayUse.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/47_ArrayUse.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a[10];
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/47_ArrayUse.c To ../test/frontend/ValidPrograms/47_ArrayUse.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/47_ArrayUse.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/47_ArrayUse.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/47_ArrayUse.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/47_ArrayUse.asm To ../test/frontend/ValidPrograms/47_ArrayUse.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/47_ArrayUse.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/08_OperatorSup.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 > 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/08_OperatorSup.c<--------------------*

../test/frontend/ValidPrograms/08_OperatorSup.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/08_OperatorSup.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/08_OperatorSup.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/08_OperatorSup.c To ../test/frontend/ValidPrograms/08_OperatorSup.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/08_OperatorSup.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/08_OperatorSup.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/08_OperatorSup.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/08_OperatorSup.asm To ../test/frontend/ValidPrograms/08_OperatorSup.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/08_OperatorSup.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/40_If.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   if (a == 1) {
      a = 2;
   }
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/40_If.c<--------------------*

../test/frontend/ValidPrograms/40_If.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/40_If.c To ../test/frontend/ValidPrograms/40_If.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/40_If.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/40_If.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/40_If.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/40_If.asm To ../test/frontend/ValidPrograms/40_If.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/40_If.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/25_OperatorNot.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = ~1;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/25_OperatorNot.c<--------------------*

../test/frontend/ValidPrograms/25_OperatorNot.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/25_OperatorNot.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/25_OperatorNot.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/25_OperatorNot.c To ../test/frontend/ValidPrograms/25_OperatorNot.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/25_OperatorNot.c:[0m no lexical error has been found 
line 5:7 extraneous input '~' expecting {CHAR, ID, INT, '++', '--', '(', '-'}
[1;31m../test/frontend/ValidPrograms/25_OperatorNot.c:[0m 1 syntax errors have been found
Compilation failed!
**********************************************************************************
FILE '../test/frontend/ValidPrograms/11_OperatorEqu.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 == 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/11_OperatorEqu.c<--------------------*

../test/frontend/ValidPrograms/11_OperatorEqu.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/11_OperatorEqu.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/11_OperatorEqu.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/11_OperatorEqu.c To ../test/frontend/ValidPrograms/11_OperatorEqu.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/11_OperatorEqu.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/11_OperatorEqu.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/11_OperatorEqu.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/11_OperatorEqu.asm To ../test/frontend/ValidPrograms/11_OperatorEqu.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/11_OperatorEqu.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/17_OperatorBAnd.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 & 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/17_OperatorBAnd.c<--------------------*

../test/frontend/ValidPrograms/17_OperatorBAnd.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/17_OperatorBAnd.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/17_OperatorBAnd.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/17_OperatorBAnd.c To ../test/frontend/ValidPrograms/17_OperatorBAnd.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/17_OperatorBAnd.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/17_OperatorBAnd.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/17_OperatorBAnd.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/17_OperatorBAnd.asm To ../test/frontend/ValidPrograms/17_OperatorBAnd.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/17_OperatorBAnd.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/31_OperatorDivAssign.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 4;
   a /= 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/31_OperatorDivAssign.c<--------------------*

../test/frontend/ValidPrograms/31_OperatorDivAssign.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/31_OperatorDivAssign.c To ../test/frontend/ValidPrograms/31_OperatorDivAssign.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/31_OperatorDivAssign.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/31_OperatorDivAssign.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/31_OperatorDivAssign.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/31_OperatorDivAssign.asm To ../test/frontend/ValidPrograms/31_OperatorDivAssign.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/31_OperatorDivAssign.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/28_OperatorPlusAssign.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   a += 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/28_OperatorPlusAssign.c<--------------------*

../test/frontend/ValidPrograms/28_OperatorPlusAssign.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/28_OperatorPlusAssign.c To ../test/frontend/ValidPrograms/28_OperatorPlusAssign.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/28_OperatorPlusAssign.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/28_OperatorPlusAssign.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/28_OperatorPlusAssign.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/28_OperatorPlusAssign.asm To ../test/frontend/ValidPrograms/28_OperatorPlusAssign.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/28_OperatorPlusAssign.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/06_OperatorMult.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 4 * 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/06_OperatorMult.c<--------------------*

../test/frontend/ValidPrograms/06_OperatorMult.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/06_OperatorMult.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/06_OperatorMult.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/06_OperatorMult.c To ../test/frontend/ValidPrograms/06_OperatorMult.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/06_OperatorMult.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/06_OperatorMult.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/06_OperatorMult.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/06_OperatorMult.asm To ../test/frontend/ValidPrograms/06_OperatorMult.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/06_OperatorMult.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/07_OperatorInf.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 < 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/07_OperatorInf.c<--------------------*

../test/frontend/ValidPrograms/07_OperatorInf.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/07_OperatorInf.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/07_OperatorInf.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/07_OperatorInf.c To ../test/frontend/ValidPrograms/07_OperatorInf.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/07_OperatorInf.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/07_OperatorInf.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/07_OperatorInf.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/07_OperatorInf.asm To ../test/frontend/ValidPrograms/07_OperatorInf.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/07_OperatorInf.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 + 2*4 - ((4/2 + 3%2) - 2);
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.c<--------------------*

../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.c To ../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.asm To ../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/39_ArithmeticExpressionWithPar.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/15_OperatorOr.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 || 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/15_OperatorOr.c<--------------------*

../test/frontend/ValidPrograms/15_OperatorOr.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/15_OperatorOr.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/15_OperatorOr.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/15_OperatorOr.c To ../test/frontend/ValidPrograms/15_OperatorOr.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/15_OperatorOr.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/15_OperatorOr.c:[0m no syntax error has been found 
Exception caught std::bad_cast
Compilation failed!
**********************************************************************************
FILE '../test/frontend/ValidPrograms/29_OperatorMinusAssign.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   a -= 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/29_OperatorMinusAssign.c<--------------------*

../test/frontend/ValidPrograms/29_OperatorMinusAssign.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/29_OperatorMinusAssign.c To ../test/frontend/ValidPrograms/29_OperatorMinusAssign.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/29_OperatorMinusAssign.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/29_OperatorMinusAssign.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/29_OperatorMinusAssign.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/29_OperatorMinusAssign.asm To ../test/frontend/ValidPrograms/29_OperatorMinusAssign.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/29_OperatorMinusAssign.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/44_IfElseIf.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   if (a == 1) {
      a = 2;
   }
   else {
      if (a == 2) {
         a = 3;
      }
   }
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/44_IfElseIf.c<--------------------*

../test/frontend/ValidPrograms/44_IfElseIf.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/44_IfElseIf.c To ../test/frontend/ValidPrograms/44_IfElseIf.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/44_IfElseIf.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/44_IfElseIf.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/44_IfElseIf.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/44_IfElseIf.asm To ../test/frontend/ValidPrograms/44_IfElseIf.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/44_IfElseIf.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/13_OperatorMod.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 % 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/13_OperatorMod.c<--------------------*

../test/frontend/ValidPrograms/13_OperatorMod.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/13_OperatorMod.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/13_OperatorMod.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/13_OperatorMod.c To ../test/frontend/ValidPrograms/13_OperatorMod.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/13_OperatorMod.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/13_OperatorMod.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/13_OperatorMod.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/13_OperatorMod.asm To ../test/frontend/ValidPrograms/13_OperatorMod.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/13_OperatorMod.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/51_CharConstSpecial.c':

#include <stdint.h>

void main() {
   char a;
   a = '
';
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/51_CharConstSpecial.c<--------------------*

../test/frontend/ValidPrograms/51_CharConstSpecial.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/51_CharConstSpecial.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/51_CharConstSpecial.c:4:9: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    char a;
         ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/51_CharConstSpecial.c To ../test/frontend/ValidPrograms/51_CharConstSpecial.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/51_CharConstSpecial.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/51_CharConstSpecial.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/51_CharConstSpecial.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/51_CharConstSpecial.asm To ../test/frontend/ValidPrograms/51_CharConstSpecial.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/51_CharConstSpecial.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/34_OperatorBitOrAssign.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   a |= 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/34_OperatorBitOrAssign.c<--------------------*

../test/frontend/ValidPrograms/34_OperatorBitOrAssign.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/34_OperatorBitOrAssign.c To ../test/frontend/ValidPrograms/34_OperatorBitOrAssign.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/34_OperatorBitOrAssign.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/34_OperatorBitOrAssign.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/34_OperatorBitOrAssign.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/34_OperatorBitOrAssign.asm To ../test/frontend/ValidPrograms/34_OperatorBitOrAssign.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/34_OperatorBitOrAssign.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/21_OperatorIncPost.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   a++;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/21_OperatorIncPost.c<--------------------*

../test/frontend/ValidPrograms/21_OperatorIncPost.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/21_OperatorIncPost.c To ../test/frontend/ValidPrograms/21_OperatorIncPost.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/21_OperatorIncPost.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/21_OperatorIncPost.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/21_OperatorIncPost.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/21_OperatorIncPost.asm To ../test/frontend/ValidPrograms/21_OperatorIncPost.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/21_OperatorIncPost.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/33_OperatorBitAndAssign.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   a &= 3;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/33_OperatorBitAndAssign.c<--------------------*

../test/frontend/ValidPrograms/33_OperatorBitAndAssign.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/33_OperatorBitAndAssign.c To ../test/frontend/ValidPrograms/33_OperatorBitAndAssign.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/33_OperatorBitAndAssign.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/33_OperatorBitAndAssign.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/33_OperatorBitAndAssign.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/33_OperatorBitAndAssign.asm To ../test/frontend/ValidPrograms/33_OperatorBitAndAssign.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/33_OperatorBitAndAssign.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/18_OperatorNeg.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   a = -a;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/18_OperatorNeg.c<--------------------*

../test/frontend/ValidPrograms/18_OperatorNeg.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/18_OperatorNeg.c To ../test/frontend/ValidPrograms/18_OperatorNeg.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/18_OperatorNeg.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/18_OperatorNeg.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/18_OperatorNeg.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/18_OperatorNeg.asm To ../test/frontend/ValidPrograms/18_OperatorNeg.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/18_OperatorNeg.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/02_IncludeStdint.c':

#include <stdint.h>

void main() {
   int32_t a;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/02_IncludeStdint.c<--------------------*

../test/frontend/ValidPrograms/02_IncludeStdint.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/02_IncludeStdint.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/02_IncludeStdint.c:4:12: warning: unused variable â€˜aâ€™ [-Wunused-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/02_IncludeStdint.c To ../test/frontend/ValidPrograms/02_IncludeStdint.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/02_IncludeStdint.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/02_IncludeStdint.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/02_IncludeStdint.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/02_IncludeStdint.asm To ../test/frontend/ValidPrograms/02_IncludeStdint.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/02_IncludeStdint.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/27_OperatorComp.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = ~1;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/27_OperatorComp.c<--------------------*

../test/frontend/ValidPrograms/27_OperatorComp.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/27_OperatorComp.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/27_OperatorComp.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/27_OperatorComp.c To ../test/frontend/ValidPrograms/27_OperatorComp.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/27_OperatorComp.c:[0m no lexical error has been found 
line 5:7 extraneous input '~' expecting {CHAR, ID, INT, '++', '--', '(', '-'}
[1;31m../test/frontend/ValidPrograms/27_OperatorComp.c:[0m 1 syntax errors have been found
Compilation failed!
**********************************************************************************
FILE '../test/frontend/ValidPrograms/03_OperatorPlus.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 + 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/03_OperatorPlus.c<--------------------*

../test/frontend/ValidPrograms/03_OperatorPlus.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/03_OperatorPlus.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/03_OperatorPlus.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/03_OperatorPlus.c To ../test/frontend/ValidPrograms/03_OperatorPlus.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/03_OperatorPlus.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/03_OperatorPlus.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/03_OperatorPlus.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/03_OperatorPlus.asm To ../test/frontend/ValidPrograms/03_OperatorPlus.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/03_OperatorPlus.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/35_OperatorBitXorAssign.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   a ^= 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/35_OperatorBitXorAssign.c<--------------------*

../test/frontend/ValidPrograms/35_OperatorBitXorAssign.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/35_OperatorBitXorAssign.c To ../test/frontend/ValidPrograms/35_OperatorBitXorAssign.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/35_OperatorBitXorAssign.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/35_OperatorBitXorAssign.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/35_OperatorBitXorAssign.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/35_OperatorBitXorAssign.asm To ../test/frontend/ValidPrograms/35_OperatorBitXorAssign.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/35_OperatorBitXorAssign.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/12_OperatorDiff.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 != 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/12_OperatorDiff.c<--------------------*

../test/frontend/ValidPrograms/12_OperatorDiff.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/12_OperatorDiff.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/12_OperatorDiff.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/12_OperatorDiff.c To ../test/frontend/ValidPrograms/12_OperatorDiff.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/12_OperatorDiff.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/12_OperatorDiff.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/12_OperatorDiff.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/12_OperatorDiff.asm To ../test/frontend/ValidPrograms/12_OperatorDiff.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/12_OperatorDiff.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/24_OperatorDecPre.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   --a;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/24_OperatorDecPre.c<--------------------*

../test/frontend/ValidPrograms/24_OperatorDecPre.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/24_OperatorDecPre.c To ../test/frontend/ValidPrograms/24_OperatorDecPre.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/24_OperatorDecPre.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/24_OperatorDecPre.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/24_OperatorDecPre.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/24_OperatorDecPre.asm To ../test/frontend/ValidPrograms/24_OperatorDecPre.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/24_OperatorDecPre.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/01_SimpleDeclaration.c':

void main() {
   char a;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/01_SimpleDeclaration.c<--------------------*

../test/frontend/ValidPrograms/01_SimpleDeclaration.c:1:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/01_SimpleDeclaration.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/01_SimpleDeclaration.c:2:9: warning: unused variable â€˜aâ€™ [-Wunused-variable]
    char a;
         ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/01_SimpleDeclaration.c To ../test/frontend/ValidPrograms/01_SimpleDeclaration.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/01_SimpleDeclaration.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/01_SimpleDeclaration.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/01_SimpleDeclaration.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/01_SimpleDeclaration.asm To ../test/frontend/ValidPrograms/01_SimpleDeclaration.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/01_SimpleDeclaration.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/14_OperatorAnd.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 && 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/14_OperatorAnd.c<--------------------*

../test/frontend/ValidPrograms/14_OperatorAnd.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/14_OperatorAnd.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/14_OperatorAnd.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/14_OperatorAnd.c To ../test/frontend/ValidPrograms/14_OperatorAnd.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/14_OperatorAnd.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/14_OperatorAnd.c:[0m no syntax error has been found 
Exception caught std::bad_cast
Compilation failed!
**********************************************************************************
FILE '../test/frontend/ValidPrograms/42_While.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 10;
   while (a != 0) {
      a = a-1;
   }
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/42_While.c<--------------------*

../test/frontend/ValidPrograms/42_While.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/42_While.c To ../test/frontend/ValidPrograms/42_While.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/42_While.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/42_While.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/42_While.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/42_While.asm To ../test/frontend/ValidPrograms/42_While.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/42_While.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/09_OperatorLeq.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 <= 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/09_OperatorLeq.c<--------------------*

../test/frontend/ValidPrograms/09_OperatorLeq.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/09_OperatorLeq.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/09_OperatorLeq.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/09_OperatorLeq.c To ../test/frontend/ValidPrograms/09_OperatorLeq.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/09_OperatorLeq.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/09_OperatorLeq.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/09_OperatorLeq.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/09_OperatorLeq.asm To ../test/frontend/ValidPrograms/09_OperatorLeq.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/09_OperatorLeq.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/05_OperatorDiv.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 4 / 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/05_OperatorDiv.c<--------------------*

../test/frontend/ValidPrograms/05_OperatorDiv.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/05_OperatorDiv.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/05_OperatorDiv.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/05_OperatorDiv.c To ../test/frontend/ValidPrograms/05_OperatorDiv.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/05_OperatorDiv.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/05_OperatorDiv.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/05_OperatorDiv.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/05_OperatorDiv.asm To ../test/frontend/ValidPrograms/05_OperatorDiv.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/05_OperatorDiv.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/32_OperatorModAssign.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 3;
   a %= 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/32_OperatorModAssign.c<--------------------*

../test/frontend/ValidPrograms/32_OperatorModAssign.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/32_OperatorModAssign.c To ../test/frontend/ValidPrograms/32_OperatorModAssign.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/32_OperatorModAssign.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/32_OperatorModAssign.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/32_OperatorModAssign.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/32_OperatorModAssign.asm To ../test/frontend/ValidPrograms/32_OperatorModAssign.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/32_OperatorModAssign.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/19_OperatorLeftShift.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 2 << 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/19_OperatorLeftShift.c<--------------------*

../test/frontend/ValidPrograms/19_OperatorLeftShift.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/19_OperatorLeftShift.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/19_OperatorLeftShift.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/19_OperatorLeftShift.c To ../test/frontend/ValidPrograms/19_OperatorLeftShift.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/19_OperatorLeftShift.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/19_OperatorLeftShift.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/19_OperatorLeftShift.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/19_OperatorLeftShift.asm To ../test/frontend/ValidPrograms/19_OperatorLeftShift.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/19_OperatorLeftShift.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/41_IfElse.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   if (a == 1) {
      a = 2;
   }
   else {
      a = 1;
   }
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/41_IfElse.c<--------------------*

../test/frontend/ValidPrograms/41_IfElse.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/41_IfElse.c To ../test/frontend/ValidPrograms/41_IfElse.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/41_IfElse.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/41_IfElse.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/41_IfElse.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/41_IfElse.asm To ../test/frontend/ValidPrograms/41_IfElse.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/41_IfElse.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/20_OperatorRightShift.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 8 >> 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/20_OperatorRightShift.c<--------------------*

../test/frontend/ValidPrograms/20_OperatorRightShift.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/20_OperatorRightShift.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/20_OperatorRightShift.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/20_OperatorRightShift.c To ../test/frontend/ValidPrograms/20_OperatorRightShift.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/20_OperatorRightShift.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/20_OperatorRightShift.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/20_OperatorRightShift.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/20_OperatorRightShift.asm To ../test/frontend/ValidPrograms/20_OperatorRightShift.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/20_OperatorRightShift.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/55_Return.c':

#include <stdint.h>

int32_t function(int32_t a) {
   return a+1;
}
   
void main() {
   int32_t a;
   a = 1;
   a = function(a);
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/55_Return.c<--------------------*

../test/frontend/ValidPrograms/55_Return.c:7:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/55_Return.c To ../test/frontend/ValidPrograms/55_Return.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/55_Return.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/55_Return.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/55_Return.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/55_Return.asm To ../test/frontend/ValidPrograms/55_Return.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/55_Return.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/26_OperatorXor.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 ^ 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/26_OperatorXor.c<--------------------*

../test/frontend/ValidPrograms/26_OperatorXor.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/26_OperatorXor.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/26_OperatorXor.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/26_OperatorXor.c To ../test/frontend/ValidPrograms/26_OperatorXor.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/26_OperatorXor.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/26_OperatorXor.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/26_OperatorXor.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/26_OperatorXor.asm To ../test/frontend/ValidPrograms/26_OperatorXor.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/26_OperatorXor.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/50_CharConst.c':

#include <stdint.h>

void main() {
   char a;
   a = 'a';
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/50_CharConst.c<--------------------*

../test/frontend/ValidPrograms/50_CharConst.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/50_CharConst.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/50_CharConst.c:4:9: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    char a;
         ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/50_CharConst.c To ../test/frontend/ValidPrograms/50_CharConst.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/50_CharConst.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/50_CharConst.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/50_CharConst.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/50_CharConst.asm To ../test/frontend/ValidPrograms/50_CharConst.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/50_CharConst.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/46_ArrayDec.c':

#include <stdint.h>

void main() {
   int32_t a[10];
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/46_ArrayDec.c<--------------------*

../test/frontend/ValidPrograms/46_ArrayDec.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/46_ArrayDec.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/46_ArrayDec.c:4:12: warning: unused variable â€˜aâ€™ [-Wunused-variable]
    int32_t a[10];
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/46_ArrayDec.c To ../test/frontend/ValidPrograms/46_ArrayDec.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/46_ArrayDec.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/46_ArrayDec.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/46_ArrayDec.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/46_ArrayDec.asm To ../test/frontend/ValidPrograms/46_ArrayDec.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/46_ArrayDec.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/54_FunctionCallCustom.c':

#include <stdint.h>
#include <stdio.h>

void function(char a) {
   putchar(a);
}
   
void main() {
   function('a');
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/54_FunctionCallCustom.c<--------------------*

../test/frontend/ValidPrograms/54_FunctionCallCustom.c:8:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/54_FunctionCallCustom.c To ../test/frontend/ValidPrograms/54_FunctionCallCustom.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/54_FunctionCallCustom.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/54_FunctionCallCustom.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/54_FunctionCallCustom.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/54_FunctionCallCustom.asm To ../test/frontend/ValidPrograms/54_FunctionCallCustom.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/54_FunctionCallCustom.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----
a
-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/36_OperatorComma.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1, 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/36_OperatorComma.c<--------------------*

../test/frontend/ValidPrograms/36_OperatorComma.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/36_OperatorComma.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/36_OperatorComma.c:5:9: warning: right-hand operand of comma expression has no effect [-Wunused-value]
    a = 1, 2;
         ^
../test/frontend/ValidPrograms/36_OperatorComma.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/36_OperatorComma.c To ../test/frontend/ValidPrograms/36_OperatorComma.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/36_OperatorComma.c:[0m no lexical error has been found 
line 5:8 mismatched input ',' expecting ';'
[1;31m../test/frontend/ValidPrograms/36_OperatorComma.c:[0m 1 syntax errors have been found
Compilation failed!
**********************************************************************************
FILE '../test/frontend/ValidPrograms/16_OperatorBOr.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 | 2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/16_OperatorBOr.c<--------------------*

../test/frontend/ValidPrograms/16_OperatorBOr.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/16_OperatorBOr.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/16_OperatorBOr.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/16_OperatorBOr.c To ../test/frontend/ValidPrograms/16_OperatorBOr.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/16_OperatorBOr.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/16_OperatorBOr.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/16_OperatorBOr.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/16_OperatorBOr.asm To ../test/frontend/ValidPrograms/16_OperatorBOr.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/16_OperatorBOr.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/37_Par.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = (1 + 2) * 3;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/37_Par.c<--------------------*

../test/frontend/ValidPrograms/37_Par.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/37_Par.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/37_Par.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/37_Par.c To ../test/frontend/ValidPrograms/37_Par.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/37_Par.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/37_Par.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/37_Par.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/37_Par.asm To ../test/frontend/ValidPrograms/37_Par.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/37_Par.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/38_ArithmeticExpression.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1 + 2*4 - 4/2 + 3%2;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/38_ArithmeticExpression.c<--------------------*

../test/frontend/ValidPrograms/38_ArithmeticExpression.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/ValidPrograms/38_ArithmeticExpression.c: In function â€˜mainâ€™:
../test/frontend/ValidPrograms/38_ArithmeticExpression.c:4:12: warning: variable â€˜aâ€™ set but not used [-Wunused-but-set-variable]
    int32_t a;
            ^


*--------------------->Compilation Of ../test/frontend/ValidPrograms/38_ArithmeticExpression.c To ../test/frontend/ValidPrograms/38_ArithmeticExpression.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/38_ArithmeticExpression.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/38_ArithmeticExpression.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/38_ArithmeticExpression.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/38_ArithmeticExpression.asm To ../test/frontend/ValidPrograms/38_ArithmeticExpression.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/38_ArithmeticExpression.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/30_OperatorMultAssign.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   a *= 3;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/30_OperatorMultAssign.c<--------------------*

../test/frontend/ValidPrograms/30_OperatorMultAssign.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/30_OperatorMultAssign.c To ../test/frontend/ValidPrograms/30_OperatorMultAssign.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/30_OperatorMultAssign.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/30_OperatorMultAssign.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/30_OperatorMultAssign.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/30_OperatorMultAssign.asm To ../test/frontend/ValidPrograms/30_OperatorMultAssign.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/30_OperatorMultAssign.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/53_FunctionCallPutChar.c':

#include <stdint.h>
#include <stdio.h>

void main() {
   putchar('a');
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/53_FunctionCallPutChar.c<--------------------*

../test/frontend/ValidPrograms/53_FunctionCallPutChar.c:4:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/53_FunctionCallPutChar.c To ../test/frontend/ValidPrograms/53_FunctionCallPutChar.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/53_FunctionCallPutChar.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/53_FunctionCallPutChar.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/53_FunctionCallPutChar.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/53_FunctionCallPutChar.asm To ../test/frontend/ValidPrograms/53_FunctionCallPutChar.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/53_FunctionCallPutChar.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----
a
-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/ValidPrograms/23_OperatorDecPost.c':

#include <stdint.h>

void main() {
   int32_t a;
   a = 1;
   a--;
}

*--------------------->gcc Compilation Of ../test/frontend/ValidPrograms/23_OperatorDecPost.c<--------------------*

../test/frontend/ValidPrograms/23_OperatorDecPost.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~


*--------------------->Compilation Of ../test/frontend/ValidPrograms/23_OperatorDecPost.c To ../test/frontend/ValidPrograms/23_OperatorDecPost.asm<--------------------*

[1;96m../test/frontend/ValidPrograms/23_OperatorDecPost.c:[0m no lexical error has been found 
[1;96m../test/frontend/ValidPrograms/23_OperatorDecPost.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/frontend/ValidPrograms/23_OperatorDecPost.s

*--------------------->Compilation Of ../test/frontend/ValidPrograms/23_OperatorDecPost.asm To ../test/frontend/ValidPrograms/23_OperatorDecPost.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/frontend/ValidPrograms/23_OperatorDecPost.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c':

void main() {
   ( 1 + 2 ) );
}

*--------------------->gcc Compilation Of ../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c<--------------------*

../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c:1:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c: In function â€˜mainâ€™:
../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c:2:4: warning: statement with no effect [-Wunused-value]
    ( 1 + 2 ) );
    ^
../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c:2:13: error: expected â€˜;â€™ before â€˜)â€™ token
    ( 1 + 2 ) );
             ^~
             ;
../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c:2:14: error: expected statement before â€˜)â€™ token
    ( 1 + 2 ) );
              ^


*--------------------->Compilation Of ../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c To ../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.asm<--------------------*

[1;96m../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c:[0m no lexical error has been found 
line 2:3 mismatched input '(' expecting '}'
[1;31m../test/frontend/SyntaxError/05_SyntaxError_TooManyClosingPar.c:[0m 1 syntax errors have been found
Compilation failed!
**********************************************************************************
FILE '../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.c':

void main() {
   1 2;
}

*--------------------->gcc Compilation Of ../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.c<--------------------*

../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.c:1:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.c: In function â€˜mainâ€™:
../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.c:2:4: warning: statement with no effect [-Wunused-value]
    1 2;
    ^
../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.c:2:5: error: expected â€˜;â€™ before numeric constant
    1 2;
     ^~
     ;


*--------------------->Compilation Of ../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.c To ../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.asm<--------------------*

[1;96m../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.c:[0m no lexical error has been found 
line 2:3 mismatched input '1' expecting '}'
[1;31m../test/frontend/SyntaxError/02_SyntaxError_TwoOperands.c:[0m 1 syntax errors have been found
Compilation failed!
**********************************************************************************
FILE '../test/frontend/SyntaxError/01_SyntaxError_TwoOperators.c':

void main() {
   1 * + 2;
}

*--------------------->gcc Compilation Of ../test/frontend/SyntaxError/01_SyntaxError_TwoOperators.c<--------------------*

../test/frontend/SyntaxError/01_SyntaxError_TwoOperators.c:1:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/SyntaxError/01_SyntaxError_TwoOperators.c: In function â€˜mainâ€™:
../test/frontend/SyntaxError/01_SyntaxError_TwoOperators.c:2:4: warning: statement with no effect [-Wunused-value]
    1 * + 2;
    ^


*--------------------->Compilation Of ../test/frontend/SyntaxError/01_SyntaxError_TwoOperators.c To ../test/frontend/SyntaxError/01_SyntaxError_TwoOperators.asm<--------------------*

[1;96m../test/frontend/SyntaxError/01_SyntaxError_TwoOperators.c:[0m no lexical error has been found 
line 2:3 mismatched input '1' expecting '}'
[1;31m../test/frontend/SyntaxError/01_SyntaxError_TwoOperators.c:[0m 1 syntax errors have been found
Compilation failed!
**********************************************************************************
FILE '../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.c':

void main() {
   1 + 2
}

*--------------------->gcc Compilation Of ../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.c<--------------------*

../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.c:1:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.c: In function â€˜mainâ€™:
../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.c:2:4: warning: statement with no effect [-Wunused-value]
    1 + 2
    ^
../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.c:2:9: error: expected â€˜;â€™ before â€˜}â€™ token
    1 + 2
         ^
         ;
 }
 ~        


*--------------------->Compilation Of ../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.c To ../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.asm<--------------------*

[1;96m../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.c:[0m no lexical error has been found 
line 2:3 mismatched input '1' expecting '}'
[1;31m../test/frontend/SyntaxError/03_SyntaxError_MissingSemicolon.c:[0m 1 syntax errors have been found
Compilation failed!
**********************************************************************************
FILE '../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c':

void main() {
   1 + ( 2 * 3;
}

*--------------------->gcc Compilation Of ../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c<--------------------*

../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c:1:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() {
      ^~~~
../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c: In function â€˜mainâ€™:
../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c:2:15: error: expected â€˜)â€™ before â€˜;â€™ token
    1 + ( 2 * 3;
        ~      ^
               )
../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c:2:4: warning: statement with no effect [-Wunused-value]
    1 + ( 2 * 3;
    ^
../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c:2:16: error: expected â€˜;â€™ before â€˜}â€™ token
    1 + ( 2 * 3;
                ^
                ;
 }
 ~               


*--------------------->Compilation Of ../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c To ../test/frontend/SyntaxError/04_SyntaxError_MissingPar.asm<--------------------*

[1;96m../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c:[0m no lexical error has been found 
line 2:3 mismatched input '1' expecting '}'
[1;31m../test/frontend/SyntaxError/04_SyntaxError_MissingPar.c:[0m 1 syntax errors have been found
Compilation failed!
**********************************************************************************
FILE '../test/frontend/LexError/01_LexError_InvalidCharInStream.c':

@

*--------------------->gcc Compilation Of ../test/frontend/LexError/01_LexError_InvalidCharInStream.c<--------------------*

../test/frontend/LexError/01_LexError_InvalidCharInStream.c:1:1: error: stray â€˜@â€™ in program
 @
 ^


*--------------------->Compilation Of ../test/frontend/LexError/01_LexError_InvalidCharInStream.c To ../test/frontend/LexError/01_LexError_InvalidCharInStream.asm<--------------------*

[1m../test/frontend/LexError/01_LexError_InvalidCharInStream.c:1:0:[1;31m error: [0munrecognized token '@'
[1m../test/frontend/LexError/01_LexError_InvalidCharInStream.c: [31m1 lexical errors have been found [0m
Compilation failed!
**********************************************************************************
FILE '../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c':

#include <stdint.h>

void main() { $
}

*--------------------->gcc Compilation Of ../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c<--------------------*

../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c:3:6: warning: return type of â€˜mainâ€™ is not â€˜intâ€™ [-Wmain]
 void main() { $
      ^~~~
../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c: In function â€˜mainâ€™:
../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c:3:15: error: â€˜$â€™ undeclared (first use in this function)
 void main() { $
               ^
../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c:3:15: note: each undeclared identifier is reported only once for each function it appears in
../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c:3:16: error: expected â€˜;â€™ before â€˜}â€™ token
 void main() { $
                ^
                ;
 }
 ~               


*--------------------->Compilation Of ../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c To ../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.asm<--------------------*

[1m../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c:3:14:[1;31m error: [0munrecognized token '$'
[1m../test/frontend/LexError/02_LexError_InvalidCharInStreamWithinProgram.c: [31m1 lexical errors have been found [0m
Compilation failed!
**********************************************************************************
FILE '../test/custom/declarationAssignmentEmptyRight.c':

int main() {
    int a =;
}

*--------------------->gcc Compilation Of ../test/custom/declarationAssignmentEmptyRight.c<--------------------*

../test/custom/declarationAssignmentEmptyRight.c: In function â€˜mainâ€™:
../test/custom/declarationAssignmentEmptyRight.c:2:12: error: expected expression before â€˜;â€™ token
     int a =;
            ^
../test/custom/declarationAssignmentEmptyRight.c:2:9: warning: unused variable â€˜aâ€™ [-Wunused-variable]
     int a =;
         ^


*--------------------->Compilation Of ../test/custom/declarationAssignmentEmptyRight.c To ../test/custom/declarationAssignmentEmptyRight.asm<--------------------*

[1;96m../test/custom/declarationAssignmentEmptyRight.c:[0m no lexical error has been found 
line 2:11 mismatched input ';' expecting {CHAR, ID, INT, '++', '--', '(', '-'}
[1;31m../test/custom/declarationAssignmentEmptyRight.c:[0m 1 syntax errors have been found
Compilation failed!
**********************************************************************************
FILE '../test/custom/doubleIf.c':

int main() {
    if(1){
        if(1){
            return 42;
        }
    }
}

*--------------------->gcc Compilation Of ../test/custom/doubleIf.c<--------------------*



*--------------------->Compilation Of ../test/custom/doubleIf.c To ../test/custom/doubleIf.asm<--------------------*

[1;96m../test/custom/doubleIf.c:[0m no lexical error has been found 
[1;96m../test/custom/doubleIf.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/doubleIf.s

*--------------------->Compilation Of ../test/custom/doubleIf.asm To ../test/custom/doubleIf.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/doubleIf.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 42
**********************************************************************************
FILE '../test/custom/assignementWithoutDeclaration.c':

int main () {
    a = 42;
}

*--------------------->gcc Compilation Of ../test/custom/assignementWithoutDeclaration.c<--------------------*

../test/custom/assignementWithoutDeclaration.c: In function â€˜mainâ€™:
../test/custom/assignementWithoutDeclaration.c:2:5: error: â€˜aâ€™ undeclared (first use in this function)
     a = 42;
     ^
../test/custom/assignementWithoutDeclaration.c:2:5: note: each undeclared identifier is reported only once for each function it appears in


*--------------------->Compilation Of ../test/custom/assignementWithoutDeclaration.c To ../test/custom/assignementWithoutDeclaration.asm<--------------------*

[1;96m../test/custom/assignementWithoutDeclaration.c:[0m no lexical error has been found 
[1;96m../test/custom/assignementWithoutDeclaration.c:[0m no syntax error has been found 
[1;96m../test/custom/assignementWithoutDeclaration.c:2:4: [1;31merror:[0m 'a' has not been declared yet 
Compilation failed!
**********************************************************************************
FILE '../test/custom/returnVariable.c':

int main() {
    int a = 42;
    return a;
}

*--------------------->gcc Compilation Of ../test/custom/returnVariable.c<--------------------*



*--------------------->Compilation Of ../test/custom/returnVariable.c To ../test/custom/returnVariable.asm<--------------------*

[1;96m../test/custom/returnVariable.c:[0m no lexical error has been found 
[1;96m../test/custom/returnVariable.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/returnVariable.s

*--------------------->Compilation Of ../test/custom/returnVariable.asm To ../test/custom/returnVariable.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/returnVariable.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 42
**********************************************************************************
FILE '../test/custom/declarationWithAssignment.c':

int main() {
    int a = 42;
}

*--------------------->gcc Compilation Of ../test/custom/declarationWithAssignment.c<--------------------*

../test/custom/declarationWithAssignment.c: In function â€˜mainâ€™:
../test/custom/declarationWithAssignment.c:2:9: warning: unused variable â€˜aâ€™ [-Wunused-variable]
     int a = 42;
         ^


*--------------------->Compilation Of ../test/custom/declarationWithAssignment.c To ../test/custom/declarationWithAssignment.asm<--------------------*

[1;96m../test/custom/declarationWithAssignment.c:[0m no lexical error has been found 
[1;96m../test/custom/declarationWithAssignment.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/declarationWithAssignment.s

*--------------------->Compilation Of ../test/custom/declarationWithAssignment.asm To ../test/custom/declarationWithAssignment.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/declarationWithAssignment.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/custom/multiplicativeOperation.c':

int main() {
    int a = 2 * 1;
    return a;
}

*--------------------->gcc Compilation Of ../test/custom/multiplicativeOperation.c<--------------------*



*--------------------->Compilation Of ../test/custom/multiplicativeOperation.c To ../test/custom/multiplicativeOperation.asm<--------------------*

[1;96m../test/custom/multiplicativeOperation.c:[0m no lexical error has been found 
[1;96m../test/custom/multiplicativeOperation.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/multiplicativeOperation.s

*--------------------->Compilation Of ../test/custom/multiplicativeOperation.asm To ../test/custom/multiplicativeOperation.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/multiplicativeOperation.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 1
**********************************************************************************
FILE '../test/custom/substractionOperation.c':

int main() {
    int a = 2 - 1;
    return a;
}

*--------------------->gcc Compilation Of ../test/custom/substractionOperation.c<--------------------*



*--------------------->Compilation Of ../test/custom/substractionOperation.c To ../test/custom/substractionOperation.asm<--------------------*

[1;96m../test/custom/substractionOperation.c:[0m no lexical error has been found 
[1;96m../test/custom/substractionOperation.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/substractionOperation.s

*--------------------->Compilation Of ../test/custom/substractionOperation.asm To ../test/custom/substractionOperation.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/substractionOperation.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 1
**********************************************************************************
FILE '../test/custom/factorial.c':

int factorial(int n)
{
    if (n >= 1) {
        return n*factorial(n-1);
    }
    else {
        return 1;
    }
}

*--------------------->gcc Compilation Of ../test/custom/factorial.c<--------------------*



*--------------------->Compilation Of ../test/custom/factorial.c To ../test/custom/factorial.asm<--------------------*

[1;96m../test/custom/factorial.c:[0m no lexical error has been found 
[1;96m../test/custom/factorial.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/factorial.s

*--------------------->Compilation Of ../test/custom/factorial.asm To ../test/custom/factorial.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/factorial.o To Binary Code a.out<--------------------*

/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x20): undefined reference to `main'
collect2: error: ld returned 1 exit status

Compilation Failed!
**********************************************************************************
FILE '../test/custom/doubleDeclaration.c':

int main() {
    int a;
    int a;
}

*--------------------->gcc Compilation Of ../test/custom/doubleDeclaration.c<--------------------*

../test/custom/doubleDeclaration.c: In function â€˜mainâ€™:
../test/custom/doubleDeclaration.c:3:9: error: redeclaration of â€˜aâ€™ with no linkage
     int a;
         ^
../test/custom/doubleDeclaration.c:2:9: note: previous declaration of â€˜aâ€™ was here
     int a;
         ^
../test/custom/doubleDeclaration.c:3:9: warning: unused variable â€˜aâ€™ [-Wunused-variable]
     int a;
         ^


*--------------------->Compilation Of ../test/custom/doubleDeclaration.c To ../test/custom/doubleDeclaration.asm<--------------------*

[1;96m../test/custom/doubleDeclaration.c:[0m no lexical error has been found 
[1;96m../test/custom/doubleDeclaration.c:[0m no syntax error has been found 
[1;96m../test/custom/doubleDeclaration.c:3:4: [1;31merror:[0m identifier 'a' has already been declared 
Compilation failed!
**********************************************************************************
FILE '../test/custom/doubleDeclarationWithAssignement.c':

int main() {
    int a;
    int a = 3;
}

*--------------------->gcc Compilation Of ../test/custom/doubleDeclarationWithAssignement.c<--------------------*

../test/custom/doubleDeclarationWithAssignement.c: In function â€˜mainâ€™:
../test/custom/doubleDeclarationWithAssignement.c:3:9: error: redeclaration of â€˜aâ€™ with no linkage
     int a = 3;
         ^
../test/custom/doubleDeclarationWithAssignement.c:2:9: note: previous declaration of â€˜aâ€™ was here
     int a;
         ^
../test/custom/doubleDeclarationWithAssignement.c:3:9: warning: unused variable â€˜aâ€™ [-Wunused-variable]
     int a = 3;
         ^


*--------------------->Compilation Of ../test/custom/doubleDeclarationWithAssignement.c To ../test/custom/doubleDeclarationWithAssignement.asm<--------------------*

[1;96m../test/custom/doubleDeclarationWithAssignement.c:[0m no lexical error has been found 
[1;96m../test/custom/doubleDeclarationWithAssignement.c:[0m no syntax error has been found 
[1;96m../test/custom/doubleDeclarationWithAssignement.c:3:4: [1;31merror:[0m identifier 'a' has already been declared 
Compilation failed!
**********************************************************************************
FILE '../test/custom/negativeExpressionWithoutParentheses.c':

int main() {
    int a = 2;
    return - a;
}

*--------------------->gcc Compilation Of ../test/custom/negativeExpressionWithoutParentheses.c<--------------------*



*--------------------->Compilation Of ../test/custom/negativeExpressionWithoutParentheses.c To ../test/custom/negativeExpressionWithoutParentheses.asm<--------------------*

[1;96m../test/custom/negativeExpressionWithoutParentheses.c:[0m no lexical error has been found 
[1;96m../test/custom/negativeExpressionWithoutParentheses.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/negativeExpressionWithoutParentheses.s

*--------------------->Compilation Of ../test/custom/negativeExpressionWithoutParentheses.asm To ../test/custom/negativeExpressionWithoutParentheses.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/negativeExpressionWithoutParentheses.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 254
**********************************************************************************
FILE '../test/custom/returnValue.c':

int main() {
    return 42;
}

*--------------------->gcc Compilation Of ../test/custom/returnValue.c<--------------------*



*--------------------->Compilation Of ../test/custom/returnValue.c To ../test/custom/returnValue.asm<--------------------*

[1;96m../test/custom/returnValue.c:[0m no lexical error has been found 
[1;96m../test/custom/returnValue.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/returnValue.s

*--------------------->Compilation Of ../test/custom/returnValue.asm To ../test/custom/returnValue.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/returnValue.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 42
**********************************************************************************
FILE '../test/custom/emptyMainFunction.c':

int main() {}

*--------------------->gcc Compilation Of ../test/custom/emptyMainFunction.c<--------------------*



*--------------------->Compilation Of ../test/custom/emptyMainFunction.c To ../test/custom/emptyMainFunction.asm<--------------------*

[1;96m../test/custom/emptyMainFunction.c:[0m no lexical error has been found 
[1;96m../test/custom/emptyMainFunction.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/emptyMainFunction.s

*--------------------->Compilation Of ../test/custom/emptyMainFunction.asm To ../test/custom/emptyMainFunction.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/emptyMainFunction.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/custom/irtest.c':

int main() {
    char str[100] = {'c','a','o',' ','x','u','a','n',' ','h','u','y','
','
**********************************************************************************
FILE '../test/custom/declarationWithoutAssignment.c':

int main() {
    int a;
}

*--------------------->gcc Compilation Of ../test/custom/declarationWithoutAssignment.c<--------------------*

../test/custom/declarationWithoutAssignment.c: In function â€˜mainâ€™:
../test/custom/declarationWithoutAssignment.c:2:9: warning: unused variable â€˜aâ€™ [-Wunused-variable]
     int a;
         ^


*--------------------->Compilation Of ../test/custom/declarationWithoutAssignment.c To ../test/custom/declarationWithoutAssignment.asm<--------------------*

[1;96m../test/custom/declarationWithoutAssignment.c:[0m no lexical error has been found 
[1;96m../test/custom/declarationWithoutAssignment.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/declarationWithoutAssignment.s

*--------------------->Compilation Of ../test/custom/declarationWithoutAssignment.asm To ../test/custom/declarationWithoutAssignment.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/declarationWithoutAssignment.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/custom/emptyFile.c':



*--------------------->gcc Compilation Of ../test/custom/emptyFile.c<--------------------*



*--------------------->Compilation Of ../test/custom/emptyFile.c To ../test/custom/emptyFile.asm<--------------------*

[1;96m../test/custom/emptyFile.c:[0m no lexical error has been found 
[1;96m../test/custom/emptyFile.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/emptyFile.s

*--------------------->Compilation Of ../test/custom/emptyFile.asm To ../test/custom/emptyFile.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/emptyFile.o To Binary Code a.out<--------------------*

/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x20): undefined reference to `main'
collect2: error: ld returned 1 exit status

Compilation Failed!
**********************************************************************************
FILE '../test/custom/multipleAssignmentLine.c':

int main() {
    int a,b,c;
}

*--------------------->gcc Compilation Of ../test/custom/multipleAssignmentLine.c<--------------------*

../test/custom/multipleAssignmentLine.c: In function â€˜mainâ€™:
../test/custom/multipleAssignmentLine.c:2:13: warning: unused variable â€˜câ€™ [-Wunused-variable]
     int a,b,c;
             ^
../test/custom/multipleAssignmentLine.c:2:11: warning: unused variable â€˜bâ€™ [-Wunused-variable]
     int a,b,c;
           ^
../test/custom/multipleAssignmentLine.c:2:9: warning: unused variable â€˜aâ€™ [-Wunused-variable]
     int a,b,c;
         ^


*--------------------->Compilation Of ../test/custom/multipleAssignmentLine.c To ../test/custom/multipleAssignmentLine.asm<--------------------*

[1;96m../test/custom/multipleAssignmentLine.c:[0m no lexical error has been found 
[1;96m../test/custom/multipleAssignmentLine.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/multipleAssignmentLine.s

*--------------------->Compilation Of ../test/custom/multipleAssignmentLine.asm To ../test/custom/multipleAssignmentLine.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/multipleAssignmentLine.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/custom/miParcoursTest.c':

int main ()
{
    int a, b, c;
    a = 17;
    b = 42;
    c = a*a + b*b + 1;
    return c;
}

*--------------------->gcc Compilation Of ../test/custom/miParcoursTest.c<--------------------*



*--------------------->Compilation Of ../test/custom/miParcoursTest.c To ../test/custom/miParcoursTest.asm<--------------------*

[1;96m../test/custom/miParcoursTest.c:[0m no lexical error has been found 
[1;96m../test/custom/miParcoursTest.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/miParcoursTest.s

*--------------------->Compilation Of ../test/custom/miParcoursTest.asm To ../test/custom/miParcoursTest.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/miParcoursTest.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 6
**********************************************************************************
FILE '../test/custom/customTest.c':

int main() {
    int a = 6;
    int b = a/6;
    return b;
}

*--------------------->gcc Compilation Of ../test/custom/customTest.c<--------------------*



*--------------------->Compilation Of ../test/custom/customTest.c To ../test/custom/customTest.asm<--------------------*

[1;96m../test/custom/customTest.c:[0m no lexical error has been found 
[1;96m../test/custom/customTest.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/customTest.s

*--------------------->Compilation Of ../test/custom/customTest.asm To ../test/custom/customTest.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/customTest.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 1
**********************************************************************************
FILE '../test/custom/additionOperation.c':

int main() {
    int a = 2 + 1;
    return a;
}

*--------------------->gcc Compilation Of ../test/custom/additionOperation.c<--------------------*



*--------------------->Compilation Of ../test/custom/additionOperation.c To ../test/custom/additionOperation.asm<--------------------*

[1;96m../test/custom/additionOperation.c:[0m no lexical error has been found 
[1;96m../test/custom/additionOperation.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/additionOperation.s

*--------------------->Compilation Of ../test/custom/additionOperation.asm To ../test/custom/additionOperation.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/additionOperation.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 3
**********************************************************************************
FILE '../test/custom/divisiveOperation.c':

int main() {
    int a = 2 / 1;
    return a;
}

*--------------------->gcc Compilation Of ../test/custom/divisiveOperation.c<--------------------*



*--------------------->Compilation Of ../test/custom/divisiveOperation.c To ../test/custom/divisiveOperation.asm<--------------------*

[1;96m../test/custom/divisiveOperation.c:[0m no lexical error has been found 
[1;96m../test/custom/divisiveOperation.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/divisiveOperation.s

*--------------------->Compilation Of ../test/custom/divisiveOperation.asm To ../test/custom/divisiveOperation.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/divisiveOperation.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 1
**********************************************************************************
FILE '../test/custom/doubleWhile.c':

int main() {
    int i = 0;
    int j = 0;
    while(i < 10){
        while(j < 10){
            j++;
        }
        i++;
    }
}

*--------------------->gcc Compilation Of ../test/custom/doubleWhile.c<--------------------*



*--------------------->Compilation Of ../test/custom/doubleWhile.c To ../test/custom/doubleWhile.asm<--------------------*

[1;96m../test/custom/doubleWhile.c:[0m no lexical error has been found 
[1;96m../test/custom/doubleWhile.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/doubleWhile.s

*--------------------->Compilation Of ../test/custom/doubleWhile.asm To ../test/custom/doubleWhile.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/doubleWhile.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/custom/negativeExpressionWithParentheses.c':

int main() {
    int a = 2;
    return - (a);
}

*--------------------->gcc Compilation Of ../test/custom/negativeExpressionWithParentheses.c<--------------------*



*--------------------->Compilation Of ../test/custom/negativeExpressionWithParentheses.c To ../test/custom/negativeExpressionWithParentheses.asm<--------------------*

[1;96m../test/custom/negativeExpressionWithParentheses.c:[0m no lexical error has been found 
[1;96m../test/custom/negativeExpressionWithParentheses.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/negativeExpressionWithParentheses.s

*--------------------->Compilation Of ../test/custom/negativeExpressionWithParentheses.asm To ../test/custom/negativeExpressionWithParentheses.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/negativeExpressionWithParentheses.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 254
**********************************************************************************
FILE '../test/custom/expressionWithParentheses.c':

int main() {
    int a = 42;
    return (a);
}

*--------------------->gcc Compilation Of ../test/custom/expressionWithParentheses.c<--------------------*



*--------------------->Compilation Of ../test/custom/expressionWithParentheses.c To ../test/custom/expressionWithParentheses.asm<--------------------*

[1;96m../test/custom/expressionWithParentheses.c:[0m no lexical error has been found 
[1;96m../test/custom/expressionWithParentheses.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/expressionWithParentheses.s

*--------------------->Compilation Of ../test/custom/expressionWithParentheses.asm To ../test/custom/expressionWithParentheses.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/expressionWithParentheses.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 42
**********************************************************************************
FILE '../test/custom/moduloOperation.c':

int main() {
    int a = 2 % 1;
    return a;
}

*--------------------->gcc Compilation Of ../test/custom/moduloOperation.c<--------------------*



*--------------------->Compilation Of ../test/custom/moduloOperation.c To ../test/custom/moduloOperation.asm<--------------------*

[1;96m../test/custom/moduloOperation.c:[0m no lexical error has been found 
[1;96m../test/custom/moduloOperation.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/moduloOperation.s

*--------------------->Compilation Of ../test/custom/moduloOperation.asm To ../test/custom/moduloOperation.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/moduloOperation.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 0
**********************************************************************************
FILE '../test/custom/multipleOperationsLine.c':

int main () {
    int a;
    int b;
    int c;
    a = 2;
    b = 3;
    c = a*a + b*b + 1;
    return c;
}

*--------------------->gcc Compilation Of ../test/custom/multipleOperationsLine.c<--------------------*



*--------------------->Compilation Of ../test/custom/multipleOperationsLine.c To ../test/custom/multipleOperationsLine.asm<--------------------*

[1;96m../test/custom/multipleOperationsLine.c:[0m no lexical error has been found 
[1;96m../test/custom/multipleOperationsLine.c:[0m no syntax error has been found 

Compilation Successful!

Assembly code is generated to ../test/custom/multipleOperationsLine.s

*--------------------->Compilation Of ../test/custom/multipleOperationsLine.asm To ../test/custom/multipleOperationsLine.o<--------------------*

Compilation Successful!

*--------------------->Compilation Of ../test/custom/multipleOperationsLine.o To Binary Code a.out<--------------------*

Compilation Successful!

*--------------------->Execute a.out<--------------------*

OUTPUT 
-----

-----
Return code of 'a.out': 14
